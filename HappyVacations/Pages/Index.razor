@page "/{teamId}/{teamName}"
@using HappyVacations.ViewModels

<PageTitle>Календарь отпусков @team?.Title</PageTitle>

    @if (isTeamLoaded == false)
{
    <div class="lds-dual-ring"></div>
}

@if (isTeamLoaded == true && team is null)
{
    <NotFound />
}

@if (isTeamLoaded == true && team is not null)
{
    <div>
        <div class="page-header">

            <FluentLabel Typo="Typography.PageTitle">@team.Title</FluentLabel>
                
            @if (listView != "3")
            {
                <div class="d-flex align-items-center periodSelectorSection">
                    Период с

                    <MyFluentMonthPicker Value=Start ValueChanged="@(d=> Start = new DateTime(d.Value.Year, d.Value.Month, 1))"></MyFluentMonthPicker> по
                    <MyFluentMonthPicker Value=End ValueChanged="@(d=> End = new DateTime(d.Value.Year, d.Value.Month, DateTime.DaysInMonth(d.Value.Year, d.Value.Month)))" />

                    <FluentMenuButton Text="Быстрый выбор периода" Items="@quickItems" OnMenuChanged="HandleOnQuickMenuChanged"></FluentMenuButton>

                </div>
            }
            
            <div class="d-flex align-items-center employeesViewModeSection">

                <FluentLabel Class="mr-1">Вид</FluentLabel>
                <FluentSelect TOption="string" @bind-Value=@listView class="mr-1 employeesView__selector">
                    <FluentOption Value="1">
                        Все сотрудники
                    </FluentOption>
                    <FluentOption Value="2">
                        Один сотрудник
                    </FluentOption>
                    <FluentOption Value="3">Ближайшие отпуска</FluentOption>
                </FluentSelect>

                <FluentButton Appearance="Appearance.Accent" OnClick="AddNewEmployee" class="employeesView__addButton">Добавить сотрудника</FluentButton>

                <ThemeSwitcher />

                <FluentAnchor Appearance="Appearance.Hypertext"
                              Href="https://github.com/for7raid/HappyVacations" Target="_blank" Rel="noreferrer noopener"
                              title="Отпуска на GitHub" aria-label="HappyVacations Repo"
                              class="ml-1">
                    <FluentIcon Value="@(new DemoIcons.Size20.GitHub())" Color="Color.FillInverse" />
                </FluentAnchor>

            </div>
        </div>

        @if (listView == "1")
        {
            <div class="container">
                <TableView Employees="@Employees" Start="@Start" End="@End.Value" Team="@team" CalendarExceptions="@CalendarExceptions" EditEmployee="EditEmployee" EditDateCell="@EditDateCell" />
            </div>
        }
        else if (listView == "2")
        {
            <div class="container mt-1">
                <CalendarView Employees="@Employees" Start="@Start" End="@End.Value" CalendarExceptions="@CalendarExceptions" EditDateCell="@EditDateCell" />
            </div>
        }
        else if (listView == "3")
        {
            <div class="container mt-1">
                <UpcomingVacations Employees="@Employees" CalendarExceptions="@CalendarExceptions" />
            </div>
        }

        <Legend />

    </div>
}

@inject IDialogService DialogService
@inject IRepository repository

@code {
    public List<Employee> Employees { get; set; }

    public List<CalendarException> CalendarExceptions { get; set; }

    public DateTime Start { get; set; } = new DateTime(DateTime.Now.Year, Math.Max(1, DateTime.Now.Month - 1), 1);
    public DateTime? End { get; set; } = new DateTime(DateTime.Now.Year, 12, 31);
    public string listView { get; set; } = "1";

    [Parameter]
    public string TeamId { get; set; } = string.Empty;
    [Parameter]
    public string TeamName { get; set; } = string.Empty;

    Team? team;

    bool isQuickMenuOpened = false;
    bool isTeamLoaded = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        team = await repository.GetTeam(TeamId, TeamName);
        isTeamLoaded = true;
        CalendarExceptions = await repository.GetCalendarExpeptions();

        Employees = await repository.GetEmployees(TeamId);
    }

    private async Task AddNewEmployee()
    {
        var item = new Employee() { TeamId = team.Id };
        var viewModel = new EmployeeEditViewModel
            {
                Item = item,
                Roles = Employees.Where(e => !string.IsNullOrWhiteSpace(e.Role)).Select(e => e.Role!).Distinct()
            };

        DialogParameters<EmployeeEditViewModel> parameters = new()
            {
                Title = $"Добавить нового сотрудника",
                PrimaryAction = null,
                SecondaryAction = null,
                PrimaryActionEnabled = false,
                SecondaryActionEnabled = false,
                Width = "400px",
                Height = "400px",
                Content = viewModel
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<EmployeeEditor, EmployeeEditViewModel>(parameters);
        DialogResult? result = await dialog.Result;


        if (result.Data is bool b && b)
        {
            Employees.Add(item);
            await repository.SaveEmployee(item);

        }
    }

    private async Task EditEmployee(Employee employee)
    {
        var item = new Employee() { Name = employee.Name, Role = employee.Role };
        var viewModel = new EmployeeEditViewModel
            {
                Item = item,
                Roles = Employees.Where(e => !string.IsNullOrWhiteSpace(e.Role)).Select(e => e.Role!).Distinct()
            };

        DialogParameters<EmployeeEditViewModel> parameters = new()
            {
                Title = $"Изменить сотрудника",
                PrimaryAction = null,
                SecondaryAction = null,
                PrimaryActionEnabled = false,
                SecondaryActionEnabled = false,
                Width = "400px",
                Height = "400px",
                Content = viewModel
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<EmployeeEditor, EmployeeEditViewModel>(parameters);
        DialogResult? result = await dialog.Result;


        if (result.Data is bool b && b)
        {
            employee.Name = item.Name;
            employee.Role = item.Role;

            await repository.SaveEmployee(employee);
        }
    }

    private async Task EditDateCell(Tuple<Employee, DateTime> tuple)
    {
        var employee = tuple.Item1;
        var date = tuple.Item2.Date;
        var item = employee.Items.FirstOrDefault(i => i.Date.Date == date);
        if (item is null)
        {
            employee.Items.Add(new VacationItem { Date = date });
            await repository.SaveEmployee(employee);
        }
        else
        {
            var editedItem = new VacationItem() { Date = item.Date, Cancelled = item.Cancelled, ItemType = item.ItemType };

            DialogParameters<VacationItem> parameters = new()
                {
                    Title = $"Изменить день",
                    PrimaryAction = null,
                    SecondaryAction = null,
                    PrimaryActionEnabled = false,
                    SecondaryActionEnabled = false,
                    Width = "400px",
                    Height = "400px",
                    Content = editedItem
                };

            IDialogReference dialog = await DialogService.ShowDialogAsync<VacationItemEditor, VacationItem>(parameters);
            DialogResult? result = await dialog.Result;

            if (result.Data is bool b && b)
            {
                employee.Items.Remove(item);
                await repository.SaveEmployee(employee);

            }
            else if (result.Data is VacationItem)
            {
                item.Cancelled = editedItem.Cancelled;
                item.ItemType = editedItem.ItemType;
                await repository.SaveEmployee(employee);

            }

        }
    }

    private Dictionary<string, string> quickItems = new Dictionary<string, string>()
    {
        {"currentMonth","Текущий месяц + 1"},
        //{"currentQuarter","Текущий квартал"},
        {"nextQuarter","Следующий квартал"},
        {"tillCurrentYear","До конца года"},
        {"nextYear","Следующий год"}
    };

    private async Task HandleOnQuickMenuChanged(MenuChangeEventArgs args)
    {
        var currentYear = DateTime.Now.Year;
        var currentQuarter = (int)Math.Ceiling(DateTime.Now.Month / 3.0);

        switch (args.Id)
        {
            case "currentMonth":
                Start = new DateTime(currentYear, DateTime.Now.Month, 1);
                End = Start.AddMonths(2).AddDays(-1);
                break;

            case "nextQuarter":
                if (currentQuarter < 4)
                {
                    Start = new DateTime(currentYear, (currentQuarter + 1) * 3, 1);
                    End = Start.AddMonths(3).AddDays(-1);
                }
                else
                {
                    Start = new DateTime(currentYear + 1, 1, 1);
                    End = Start.AddMonths(3).AddDays(-1);
                }
                break;
            case "nextYear":
                Start = new DateTime(currentYear + 1, 1, 1);
                End = Start.AddYears(1).AddDays(-1);
                break;
            case "tillCurrentYear":
            default:
                Start = new DateTime(currentYear, DateTime.Now.Month - 1, 1);
                End = new DateTime(currentYear, 12, 31);
                break;
        }

    }

}