@page "/{teamId}/{teamName}"

@if (team is not null)
{
    
    <BannerView SelectedEmployee="@SelectedEmployee" Employees="@Employees"  Start="@Start" End="@End.Value" CalendarExceptions="@CalendarExceptions" />
    
    <div class="content">

        <div class="period-selector">
            Период с 
            <FluentDatePicker Value=Start ValueChanged="@(d=> Start = new DateTime(d.Value.Year, d.Value.Month, 1))" /> по 
            <FluentDatePicker Value=End ValueChanged="@(d=> End = new DateTime(d.Value.Year, d.Value.Month, DateTime.DaysInMonth(d.Value.Year, d.Value.Month)))" />
        </div>

        <TableView Employees="@Employees" Start="@Start" End="@End.Value" CalendarExceptions="@CalendarExceptions" EditEmployee="EditEmployee" EditDateCell="@EditDateCell" />

        <CalendarView SelectedEmployee="@SelectedEmployee" Employees="@Employees" Start="@Start" End="@End.Value" CalendarExceptions="@CalendarExceptions" EditDateCell="@EditDateCell" />
    </div>
} 
else
{
    <div>404 - Not Found</div>
}

@inject IDialogService DialogService
@inject IRepository repository

@code {
    public List<Employee> Employees { get; set; }
    
    public Employee? SelectedEmployee { get; set; }

    public List<CalendarException> CalendarExceptions { get; set; }

    public DateTime Start { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month - 1, 1);
    public DateTime? End { get; set; } = new DateTime(DateTime.Now.Year, 12, 31);// new DateTime(DateTime.Now.Year, 12, 31);

    [Parameter]
    public string TeamId { get; set; }
    [Parameter]
    public string TeamName { get; set; }

    Team? team;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        CalendarExceptions = await repository.GetCalendarExpeptions();
        team = await repository.GetTeam(TeamId, TeamName);
        Employees = await repository.GetEmployees(TeamId);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            SelectedEmployee = Employees.FirstOrDefault();
            StateHasChanged();
        }
    }


    private async Task EditEmployee(Employee employee)
    {
        var item = new Employee() { Name = employee.Name, Role = employee.Role };

        DialogParameters<Employee> parameters = new()
            {
                Title = $"Изменить сотрудника",
                PrimaryAction = null,
                SecondaryAction = null,
                PrimaryActionEnabled = false,
                SecondaryActionEnabled = false,
                Width = "400px",
                Height = "400px",
                Content = item
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<EmployeeEditor, Employee>(parameters);
        DialogResult? result = await dialog.Result;


        if (result.Data is bool b && b)
        {
            employee.Name = item.Name;
            employee.Role = item.Role;

            await repository.SaveEmployee(employee);
        }
    }

    private async Task EditDateCell(Tuple<Employee, DateTime> tuple)
    {
        var employee = tuple.Item1;
        var date = tuple.Item2.Date;
        var item = employee.Items.FirstOrDefault(i => i.Date.Date == date);
        if (item is null)
        {
            employee.Items.Add(new VacationItem { Date = date });
        }
        else
        {
            var editedItem = new VacationItem() { Date = item.Date, Cancelled = item.Cancelled, ItemType = item.ItemType };

            DialogParameters<VacationItem> parameters = new()
                {
                    Title = $"Изменить день",
                    PrimaryAction = null,
                    SecondaryAction = null,
                    PrimaryActionEnabled = false,
                    SecondaryActionEnabled = false,
                    Width = "400px",
                    Height = "400px",
                    Content = editedItem
                };

            IDialogReference dialog = await DialogService.ShowDialogAsync<VacationItemEditor, VacationItem>(parameters);
            DialogResult? result = await dialog.Result;

            if (result.Data is bool b && b)
            {
                employee.Items.Remove(item);
                await repository.SaveEmployee(employee);

            }
            else if (result.Data is VacationItem)
            {
                item.Cancelled = editedItem.Cancelled;
                item.ItemType = editedItem.ItemType;
                await repository.SaveEmployee(employee);

            }

        }
    }

    string GetCellClass(DateTime date)
    {
        var exception = CalendarExceptions.FirstOrDefault(d => d.Date.Date == date.Date);
        var item = SelectedEmployee!.Items.FirstOrDefault(i => i.Date.Date == date.Date);

        var className = string.Empty;

        if (item is not null)
        {
            if (item.Cancelled)
            {
                className += " cancelled ";
            }
            else
            {
                className = className + " " + item.ItemType.ToString() + " ";
            }

        }

        if (exception is not null)
        {
            return exception.ExceptionType == CalendarExceptionType.Weekend ? "weekend" : string.Empty;
        }

        if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
        {
            return "weekend";
        }

        return className;
    }

}
