<div class="calendarView">
    <div class="d-flex align-items-center mb-1 calendarView__header">
        <div class="d-flex align-items-center mr-1 employeeSelectorSection">
            <label for="people-listbox" class="mr-1">Сотрудник</label>
            <FluentSelect TOption="Employee"
                          Items="@Employees"
                          Id="people-listbox"
                          Width="200px"
                          Height="250px"
                          OptionValue="@(p => p.Id)"
                          OptionText="@(p => p.Name)"
                          @bind-SelectedOption="@SelectedEmployee"
                          class="employeeSelectorSection__selector" />
        </div>


        @if (SelectedEmployee is not null)
        {
            <div class="d-flex">
                <div class="mr-1">Отмечено дней отпуска: <b>@VacationCalculatorService.TotalDays(SelectedEmployee, Start, End)</b></div>
                <div class="mr-1">Зарплатный индекс: <b>@VacationCalculatorService.SalaryIndex(SelectedEmployee, Start, End, CalendarExceptions).ToString("0.00")</b></div>
                <div class="mr-1">Рабочих дней: <b>@VacationCalculatorService.GetWorkDaysInPeriod(SelectedEmployee, Start, End, CalendarExceptions)</b></div>
            </div>
        }
    </div>

    @if (SelectedEmployee is not null)
    {
        <FluentStack Wrap=true HorizontalGap="20" VerticalGap="20">
            @for (var item = Start; item <= End; item = item.AddMonths(1))
            {
                <FluentCalendar Class='calendar'
                                PickerMonth="item"
                                ValueChanged="@(async v=> await EditDateCell.InvokeAsync(new Tuple<Employee, DateTime>(SelectedEmployee, v.Value)))">
                    <DaysTemplate>
                        @if (!context.IsInactive)
                        {
                            <span class="@GetCellClass(context.Date)">
                                @context.DayNumber
                            </span>
                        }
                    </DaysTemplate>
                </FluentCalendar>
            }
        </FluentStack>
    }

</div>

@inject IDialogService DialogService
@inject VacationCalculatorService VacationCalculatorService


@code {
    [Parameter]
    public List<Employee> Employees { get; set; } = default!;

    public Employee? SelectedEmployee { get; set; }

    [Parameter]
    public IEnumerable<CalendarException> CalendarExceptions { get; set; } = Array.Empty<CalendarException>();

    [Parameter]
    public DateTime Start { get; set; } = default!;

    [Parameter]
    public DateTime End { get; set; } = default!;

    [Parameter]
    public EventCallback<Tuple<Employee, DateTime>> EditDateCell { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            SelectedEmployee = Employees.FirstOrDefault();
            StateHasChanged();
        }
    }

    string GetCellClass(DateTime date)
    {
        var exception = CalendarExceptions.FirstOrDefault(d => d.Date.Date == date.Date);
        var item = SelectedEmployee!.Items.FirstOrDefault(i => i.Date.Date == date.Date);

        var className = string.Empty;


        if (item is not null)
        {
            if (item.Cancelled)
            {
                className += " cancelled ";
            }
            else
            {
                var error = VacationCalculatorService.Validate(SelectedEmployee, item, CalendarExceptions);

                if (error.HasError)
                {
                    className += " error ";
                }
                else
                {

                    className = className + " " + item.ItemType.ToString() + " ";
                }
            }

            

        }

        if (exception is not null)
        {
            return exception.ExceptionType == CalendarExceptionType.Weekend ? "weekend" : string.Empty;
        }

        if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
        {
            if (item is not null)
            {
                return "weekend " + item.ItemType.ToString();
            }
            return "weekend";
        }

        return className;
    }

}
