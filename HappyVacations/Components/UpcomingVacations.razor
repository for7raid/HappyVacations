<div class="valcation-table">
    <table class="planner-table">
        <thead>
            <tr>
                <th>
                    <FluentTextField @bind-Value=FilterText AutoComplete="off" Immediate=true ImmediateDelay="500" Placeholder="Фильтр..."/>
                </th>
                @for (var item = Start; item <= End; item = item.AddMonths(1))
                {
                    <th colspan="@DateTime.DaysInMonth(item.Year, item.Month)">@item.ToString("MMMM")</th>
                }
                <th></th>
            </tr>
            <tr>
                <th>Имя</th>
                <th>Дней</th>
                @for (var item = Start.Date; item <= End; item = item.AddDays(1))
                {
                    <th class="@GetHeaderCellClass(item) @(item.Day == 1 ? "month-start" :string.Empty)">@item.ToString("dd")</th>
                }
            </tr>
        </thead>
        <tbody>

            @foreach (var role in FilteredEmployees.OrderBy(e => e.Role).ThenBy(e => e.Name).GroupBy(r => r.Role))
            {
                <tr>
                    <td style="text-align:center;"><b>@role.Key</b></td>
                    <td></td>
                    @for (var item = Start.Date; item <= End; item = item.AddDays(1))
                    {
                        <td class="@(item.Day == 1 ? "month-start" :string.Empty)" ></td>
                    } 
                </tr>
                @foreach (var employee in role)
                {
                    <tr>
                        <td>
                            <div class="d-flex justify-content-between">
                                @employee.Name
                            </div>
                        </td>
                        <td>@VacationCalculatorService.TotalDays(employee, Start, End)</td>
                        @for (var item = Start.Date; item <= End; item = item.AddDays(1))
                        {
                            var day = employee.Items.FirstOrDefault(i => i.Date.Date == item);
                            var tuple = new Tuple<Employee, DateTime>(employee, new DateTime(item.Year, item.Month, item.Day));
                            var error = VacationCalculatorService.Validate(employee, day, CalendarExceptions);

                            <td title="@error.Message" class="@(item.Day == 1 ? "month-start" :string.Empty)">
                                <span class="badge @GetCellClass(day) @(error.HasError ? " error" : "")">
                                    @if (day is not null)
                                    {
                                        @day
                                    }
                                </span>
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@inject IDialogService DialogService
@inject VacationCalculatorService VacationCalculatorService

@code {

    [Parameter]
    public IEnumerable<CalendarException> CalendarExceptions { get; set; } = Array.Empty<CalendarException>();

    [Parameter]
    public List<Employee> Employees { get; set; } = default!;

    public DateTime Start { get; set; } = getMondayDate();

    public DateTime End { get; set; } = getEndDateOfPeriod();

    string FilterText = string.Empty;

    IEnumerable<Employee> FilteredEmployees => Employees
        .Where(
            e => (
                e.Name?.Contains(FilterText, StringComparison.InvariantCultureIgnoreCase)
                ?? false
            ) || (
                e.Role?.Contains(FilterText, StringComparison.InvariantCultureIgnoreCase)
                ?? false
            )
        );
    
    static DateTime getMondayDate ()
    {
        DateTime currentDate = DateTime.Today;
        DayOfWeek currentDay = currentDate.DayOfWeek;
        int daysToSubtract = (int)currentDay - (int)DayOfWeek.Monday;

        return currentDate.AddDays(-daysToSubtract);
    }

    static DateTime getEndDateOfPeriod()
    {
        DateTime startDate = getMondayDate();
        return startDate.AddDays(28);
    }

    string GetHeaderCellClass(DateTime date)
    {
        var exception = CalendarExceptions.FirstOrDefault(d => d.Date.Date == date.Date);

        if (exception is not null)
        {
            return exception.ExceptionType == CalendarExceptionType.Weekend ? "weekend" : string.Empty;
        }

        if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
        {
            return "weekend";
        }

        return string.Empty;
    }

    string GetCellClass(VacationItem? item)
    {
        if (item is not null)
        {
            if (item.Cancelled)
            {
                return string.Empty;
            }

            return item.ItemType.ToString();
        }

        return string.Empty;
    }

}
